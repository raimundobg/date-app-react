{"version":3,"file":"static/js/253.8513b3d4.chunk.js","mappings":"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","sources":["components/RevealPoll.tsx","utils/urlUtils.ts"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Activity } from '../types';\nimport { decodeActivitiesFromUrl } from '../utils/urlUtils';\n\ninterface RevealPollProps {\n  activities: Activity[];\n}\n\nconst RevealContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 80vh;\n  padding: 1rem;\n  text-align: center;\n`;\n\nconst Title = styled.h1`\n  color: #ffd700;\n  font-size: 1.8rem;\n  margin-bottom: 1.5rem;\n  \n  @media (min-width: 768px) {\n    font-size: 2.5rem;\n  }\n`;\n\nconst Subtitle = styled.p`\n  color: #ffffff;\n  font-size: 1rem;\n  margin-bottom: 2rem;\n  max-width: 90%;\n  \n  @media (min-width: 768px) {\n    font-size: 1.2rem;\n    max-width: 70%;\n  }\n`;\n\nconst BoxesContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n  margin-bottom: 2rem;\n  \n  @media (min-width: 768px) {\n    flex-direction: row;\n    gap: 2rem;\n  }\n`;\n\nconst MysteryBox = styled.div<{ isRevealed: boolean }>`\n  width: 150px;\n  height: 150px;\n  background-color: ${props => props.isRevealed ? '#3498db' : '#ffd700'};\n  border: 5px solid #e67e22;\n  border-radius: 10px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: ${props => props.isRevealed ? 'default' : 'pointer'};\n  transition: all 0.3s;\n  position: relative;\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);\n  \n  &:hover {\n    transform: ${props => props.isRevealed ? 'none' : 'translateY(-10px)'};\n  }\n  \n  &:before {\n    content: '?';\n    position: absolute;\n    font-size: 80px;\n    color: #e67e22;\n    opacity: ${props => props.isRevealed ? 0 : 1};\n    transition: opacity 0.3s;\n  }\n  \n  @media (min-width: 768px) {\n    width: 180px;\n    height: 180px;\n  }\n`;\n\nconst RevealedActivity = styled.div`\n  padding: 2rem;\n  background-color: #3498db;\n  border-radius: 10px;\n  max-width: 90%;\n  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);\n  \n  @media (min-width: 768px) {\n    max-width: 600px;\n  }\n`;\n\nconst ActivityName = styled.h2`\n  color: #ffffff;\n  font-size: 1.5rem;\n  margin-bottom: 1rem;\n  \n  @media (min-width: 768px) {\n    font-size: 2rem;\n  }\n`;\n\nconst ActivityDescription = styled.p`\n  color: #ffffff;\n  font-size: 1rem;\n  margin-bottom: 1.5rem;\n  \n  @media (min-width: 768px) {\n    font-size: 1.2rem;\n  }\n`;\n\nconst Button = styled.button`\n  background-color: #e74c3c;\n  color: white;\n  border: none;\n  border-radius: 10px;\n  padding: 12px 24px;\n  font-size: 1rem;\n  font-weight: bold;\n  cursor: pointer;\n  box-shadow: 0 4px 0 #c0392b;\n  transition: all 0.2s;\n  \n  &:hover {\n    transform: translateY(2px);\n    box-shadow: 0 2px 0 #c0392b;\n  }\n  \n  &:active {\n    transform: translateY(4px);\n    box-shadow: none;\n  }\n`;\n\nconst ErrorMessage = styled.div`\n  background-color: #e74c3c;\n  color: white;\n  padding: 1rem;\n  border-radius: 10px;\n  margin-bottom: 1.5rem;\n  max-width: 90%;\n  \n  @media (min-width: 768px) {\n    max-width: 600px;\n  }\n`;\n\nconst RevealPoll: React.FC<RevealPollProps> = ({ activities }) => {\n  const { encodedData } = useParams<{ encodedData: string }>();\n  const navigate = useNavigate();\n  \n  const [pollActivities, setPollActivities] = useState<Activity[]>([]);\n  const [selectedActivity, setSelectedActivity] = useState<Activity | null>(null);\n  const [error, setError] = useState<string>('');\n  const [creatorId, setCreatorId] = useState<string>('');\n  const [isRevealed, setIsRevealed] = useState<boolean>(false);\n  \n  useEffect(() => {\n    if (encodedData) {\n      try {\n        const { activityIds, creatorId } = decodeActivitiesFromUrl(encodedData);\n        \n        if (activityIds.length === 0) {\n          setError('Este enlace no contiene actividades válidas.');\n          return;\n        }\n        \n        const foundActivities = activityIds\n          .map(id => activities.find(a => a.id === id))\n          .filter((a): a is Activity => a !== undefined);\n        \n        if (foundActivities.length === 0) {\n          setError('No se encontraron las actividades especificadas.');\n          return;\n        }\n        \n        setPollActivities(foundActivities);\n        setCreatorId(creatorId);\n      } catch (error) {\n        console.error('Error decoding data:', error);\n        setError('Enlace inválido o corrupto.');\n      }\n    } else {\n      setError('No se proporcionó un enlace válido.');\n    }\n  }, [encodedData, activities]);\n  \n  const handleSelectBox = (index: number) => {\n    if (isRevealed || !pollActivities.length) return;\n    \n    // Seleccionar una actividad aleatoria\n    const randomIndex = Math.floor(Math.random() * pollActivities.length);\n    const selected = pollActivities[randomIndex];\n    \n    setSelectedActivity(selected);\n    setIsRevealed(true);\n    \n    // Aquí enviaríamos la notificación al creador\n    notifyCreator(selected, creatorId);\n  };\n  \n  const notifyCreator = (activity: Activity, creatorId: string) => {\n    // En una implementación real, aquí enviaríamos la notificación al creador\n    // Por ahora, solo simulamos el proceso\n    console.log(`Notificando al creador ${creatorId} que se seleccionó: ${activity.name}`);\n    \n    // Podríamos usar localStorage para simular notificaciones\n    const notifications = JSON.parse(localStorage.getItem('notifications') || '{}');\n    notifications[creatorId] = {\n      activityId: activity.id,\n      activityName: activity.name,\n      timestamp: new Date().toISOString()\n    };\n    localStorage.setItem('notifications', JSON.stringify(notifications));\n  };\n  \n  const handleGoHome = () => {\n    navigate('/');\n  };\n  \n  if (error) {\n    return (\n      <RevealContainer>\n        <Title>¡Ups! Algo salió mal</Title>\n        <ErrorMessage>{error}</ErrorMessage>\n        <Button onClick={handleGoHome}>Volver al Inicio</Button>\n      </RevealContainer>\n    );\n  }\n  \n  return (\n    <RevealContainer>\n      {!isRevealed ? (\n        <>\n          <Title>¡Elige una Caja Sorpresa!</Title>\n          <Subtitle>\n            Tu pareja ha preparado algunas actividades sorpresa para ti. \n            Elige una de las cajas para descubrir qué actividad harán juntos.\n          </Subtitle>\n          \n          <BoxesContainer>\n            {[0, 1, 2].map(index => (\n              <MysteryBox \n                key={index}\n                isRevealed={false}\n                onClick={() => handleSelectBox(index)}\n              />\n            ))}\n          </BoxesContainer>\n        </>\n      ) : (\n        <>\n          <Title>¡Actividad Revelada!</Title>\n          \n          <RevealedActivity>\n            <ActivityName>{selectedActivity?.name}</ActivityName>\n            <ActivityDescription>{selectedActivity?.description}</ActivityDescription>\n            <p>¡Tu pareja ha sido notificada de tu elección!</p>\n          </RevealedActivity>\n          \n          <div style={{ marginTop: '2rem' }}>\n            <Button onClick={handleGoHome}>Volver al Inicio</Button>\n          </div>\n        </>\n      )}\n    </RevealContainer>\n  );\n};\n\nexport default RevealPoll;\n","import { Activity } from '../types';\n\n// Genera un ID único para cada poll\nexport const generateUniqueId = (): string => {\n  return Math.random().toString(36).substring(2, 15) + \n         Math.random().toString(36).substring(2, 15);\n};\n\n// Codifica las actividades seleccionadas en un formato URL-friendly\nexport const encodeActivitiesForUrl = (activities: Activity[], creatorId: string): string => {\n  const data = {\n    activities: activities.map(a => a.id),\n    creatorId\n  };\n  \n  return encodeURIComponent(btoa(JSON.stringify(data)));\n};\n\n// Decodifica las actividades desde la URL\nexport const decodeActivitiesFromUrl = (encoded: string): { activityIds: number[], creatorId: string } => {\n  try {\n    const decoded = JSON.parse(atob(decodeURIComponent(encoded)));\n    return {\n      activityIds: decoded.activities || [],\n      creatorId: decoded.creatorId || ''\n    };\n  } catch (error) {\n    console.error('Error decoding URL data:', error);\n    return { activityIds: [], creatorId: '' };\n  }\n};\n\n// Genera la URL completa para compartir\nexport const generateShareableUrl = (baseUrl: string, encodedData: string): string => {\n  return `${baseUrl}/reveal/${encodedData}`;\n};\n"],"names":["RevealContainer","styled","div","_templateObject","_taggedTemplateLiteral","Title","h1","_templateObject2","Subtitle","p","_templateObject3","BoxesContainer","_templateObject4","MysteryBox","_templateObject5","props","isRevealed","RevealedActivity","_templateObject6","ActivityName","h2","_templateObject7","ActivityDescription","_templateObject8","Button","button","_templateObject9","ErrorMessage","_templateObject0","_ref","activities","encodedData","useParams","navigate","useNavigate","pollActivities","setPollActivities","useState","selectedActivity","setSelectedActivity","error","setError","creatorId","setCreatorId","setIsRevealed","useEffect","activityIds","decodeActivitiesFromUrl","length","foundActivities","map","id","find","a","filter","undefined","console","notifyCreator","activity","log","concat","name","notifications","JSON","parse","localStorage","getItem","activityId","activityName","timestamp","Date","toISOString","setItem","stringify","handleGoHome","_jsxs","children","_jsx","onClick","_Fragment","description","style","marginTop","index","randomIndex","Math","floor","random","selected","handleSelectBox","generateUniqueId","toString","substring","encodeActivitiesForUrl","data","encodeURIComponent","btoa","encoded","decoded","atob","decodeURIComponent","generateShareableUrl","baseUrl"],"sourceRoot":""}