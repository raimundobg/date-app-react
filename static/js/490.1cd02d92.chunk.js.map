{"version":3,"file":"static/js/490.1cd02d92.chunk.js","mappings":"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","sources":["components/CreatePoll.tsx","utils/urlUtils.ts"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { Activity } from '../types';\nimport { encodeActivitiesForUrl, generateUniqueId, generateShareableUrl } from '../utils/urlUtils';\n\ninterface CreatePollProps {\n  activities: Activity[];\n}\n\nconst CreatePollContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  max-width: 100%;\n  padding: 1rem;\n  \n  @media (min-width: 768px) {\n    max-width: 800px;\n    margin: 0 auto;\n    padding: 2rem;\n  }\n`;\n\nconst Title = styled.h1`\n  color: #ffd700;\n  font-size: 1.8rem;\n  margin-bottom: 1.5rem;\n  text-align: center;\n  \n  @media (min-width: 768px) {\n    font-size: 2.5rem;\n  }\n`;\n\nconst ActivitySelector = styled.div`\n  margin-bottom: 2rem;\n`;\n\nconst CategoryFilter = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 0.5rem;\n  margin-bottom: 1rem;\n`;\n\nconst CategoryButton = styled.button<{ isSelected: boolean }>`\n  background-color: ${props => props.isSelected ? '#e74c3c' : '#34495e'};\n  color: white;\n  border: none;\n  border-radius: 20px;\n  padding: 8px 16px;\n  font-size: 0.9rem;\n  cursor: pointer;\n  transition: all 0.2s;\n  \n  &:hover {\n    background-color: ${props => props.isSelected ? '#c0392b' : '#2c3e50'};\n  }\n`;\n\nconst ActivityList = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  gap: 1rem;\n  margin-top: 1rem;\n  \n  @media (min-width: 768px) {\n    grid-template-columns: repeat(2, 1fr);\n  }\n`;\n\nconst ActivityCard = styled.div<{ isSelected: boolean }>`\n  background-color: ${props => props.isSelected ? '#3498db' : '#2c3e50'};\n  border-radius: 10px;\n  padding: 1rem;\n  cursor: pointer;\n  transition: all 0.2s;\n  \n  &:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);\n  }\n`;\n\nconst ActivityName = styled.h3`\n  margin: 0 0 0.5rem 0;\n  color: #ffffff;\n`;\n\nconst ActivityDescription = styled.p`\n  margin: 0;\n  color: #ecf0f1;\n  font-size: 0.9rem;\n`;\n\nconst SelectedActivities = styled.div`\n  background-color: #34495e;\n  border-radius: 10px;\n  padding: 1rem;\n  margin-bottom: 2rem;\n`;\n\nconst SelectedTitle = styled.h2`\n  color: #ffd700;\n  font-size: 1.5rem;\n  margin-bottom: 1rem;\n`;\n\nconst SelectedList = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n`;\n\nconst SelectedItem = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background-color: #2c3e50;\n  border-radius: 8px;\n  padding: 0.8rem;\n`;\n\nconst RemoveButton = styled.button`\n  background-color: #e74c3c;\n  color: white;\n  border: none;\n  border-radius: 50%;\n  width: 30px;\n  height: 30px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  \n  &:hover {\n    background-color: #c0392b;\n  }\n`;\n\nconst ShareSection = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 1rem;\n`;\n\nconst ShareButton = styled.button`\n  background-color: #2ecc71;\n  color: white;\n  border: none;\n  border-radius: 10px;\n  padding: 15px 30px;\n  font-size: 1.2rem;\n  font-weight: bold;\n  cursor: pointer;\n  box-shadow: 0 4px 0 #27ae60;\n  transition: all 0.2s;\n  \n  &:hover {\n    transform: translateY(2px);\n    box-shadow: 0 2px 0 #27ae60;\n  }\n  \n  &:active {\n    transform: translateY(4px);\n    box-shadow: none;\n  }\n  \n  &:disabled {\n    background-color: #95a5a6;\n    box-shadow: 0 4px 0 #7f8c8d;\n    cursor: not-allowed;\n  }\n`;\n\nconst ShareUrl = styled.div`\n  background-color: #2c3e50;\n  border-radius: 8px;\n  padding: 1rem;\n  width: 100%;\n  word-break: break-all;\n  margin-top: 1rem;\n  \n  button {\n    background-color: #3498db;\n    color: white;\n    border: none;\n    border-radius: 5px;\n    padding: 8px 16px;\n    margin-top: 0.5rem;\n    cursor: pointer;\n    \n    &:hover {\n      background-color: #2980b9;\n    }\n  }\n`;\n\nconst BackButton = styled.button`\n  background-color: transparent;\n  color: #3498db;\n  border: none;\n  font-size: 1rem;\n  cursor: pointer;\n  margin-bottom: 1rem;\n  display: flex;\n  align-items: center;\n  \n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nconst CreatePoll: React.FC<CreatePollProps> = ({ activities }) => {\n  const navigate = useNavigate();\n  const [selectedCategory, setSelectedCategory] = useState<string>('All');\n  const [selectedActivities, setSelectedActivities] = useState<Activity[]>([]);\n  const [shareUrl, setShareUrl] = useState<string>('');\n  const [categories, setCategories] = useState<string[]>([]);\n  const [creatorId] = useState<string>(generateUniqueId());\n\n  useEffect(() => {\n    // Extraer categorías únicas\n    const uniqueCategories = Array.from(new Set(activities.map(a => a.category)));\n    setCategories(uniqueCategories);\n  }, [activities]);\n\n  const filteredActivities = selectedCategory === 'All'\n    ? activities\n    : activities.filter(a => a.category === selectedCategory);\n\n  const handleSelectActivity = (activity: Activity) => {\n    if (selectedActivities.length < 3 && !selectedActivities.some(a => a.id === activity.id)) {\n      setSelectedActivities([...selectedActivities, activity]);\n    }\n  };\n\n  const handleRemoveActivity = (activityId: number) => {\n    setSelectedActivities(selectedActivities.filter(a => a.id !== activityId));\n  };\n\n  const handleSharePoll = () => {\n    if (selectedActivities.length > 0) {\n      const encodedData = encodeActivitiesForUrl(selectedActivities, creatorId);\n      // En un entorno real, usaríamos window.location.origin\n      const baseUrl = window.location.origin || 'https://date-app-react.github.io';\n      const url = generateShareableUrl(baseUrl, encodedData);\n      setShareUrl(url);\n    }\n  };\n\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(shareUrl)\n      .then(() => {\n        alert('¡Enlace copiado al portapapeles!');\n      })\n      .catch(err => {\n        console.error('Error al copiar: ', err);\n      });\n  };\n\n  const shareViaWhatsApp = () => {\n    const whatsappUrl = `https://wa.me/?text=${encodeURIComponent('¡Elige una actividad sorpresa! ' + shareUrl)}`;\n    window.open(whatsappUrl, '_blank');\n  };\n\n  return (\n    <CreatePollContainer>\n      <BackButton onClick={() => navigate('/')}>← Volver al inicio</BackButton>\n      \n      <Title>Crea tu Poll de Actividades</Title>\n      \n      {!shareUrl ? (\n        <>\n          <ActivitySelector>\n            <CategoryFilter>\n              <CategoryButton \n                isSelected={selectedCategory === 'All'} \n                onClick={() => setSelectedCategory('All')}\n              >\n                Todas\n              </CategoryButton>\n              {categories.map(category => (\n                <CategoryButton \n                  key={category}\n                  isSelected={selectedCategory === category} \n                  onClick={() => setSelectedCategory(category)}\n                >\n                  {category}\n                </CategoryButton>\n              ))}\n            </CategoryFilter>\n            \n            <ActivityList>\n              {filteredActivities.map(activity => (\n                <ActivityCard \n                  key={activity.id}\n                  isSelected={selectedActivities.some(a => a.id === activity.id)}\n                  onClick={() => handleSelectActivity(activity)}\n                >\n                  <ActivityName>{activity.name}</ActivityName>\n                  <ActivityDescription>{activity.description}</ActivityDescription>\n                </ActivityCard>\n              ))}\n            </ActivityList>\n          </ActivitySelector>\n          \n          <SelectedActivities>\n            <SelectedTitle>Actividades Seleccionadas ({selectedActivities.length}/3)</SelectedTitle>\n            {selectedActivities.length === 0 ? (\n              <p>Selecciona hasta 3 actividades para crear tu poll.</p>\n            ) : (\n              <SelectedList>\n                {selectedActivities.map(activity => (\n                  <SelectedItem key={activity.id}>\n                    <span>{activity.name}</span>\n                    <RemoveButton onClick={() => handleRemoveActivity(activity.id)}>×</RemoveButton>\n                  </SelectedItem>\n                ))}\n              </SelectedList>\n            )}\n          </SelectedActivities>\n          \n          <ShareSection>\n            <ShareButton \n              disabled={selectedActivities.length === 0} \n              onClick={handleSharePoll}\n            >\n              Generar Enlace para Compartir\n            </ShareButton>\n          </ShareSection>\n        </>\n      ) : (\n        <ShareSection>\n          <h2>¡Tu poll está listo para compartir!</h2>\n          <p>Comparte este enlace con tu pareja para que elija una actividad sorpresa:</p>\n          \n          <ShareUrl>\n            <p>{shareUrl}</p>\n            <div style={{ display: 'flex', gap: '10px' }}>\n              <button onClick={copyToClipboard}>Copiar Enlace</button>\n              <button onClick={shareViaWhatsApp}>Compartir por WhatsApp</button>\n            </div>\n          </ShareUrl>\n          \n          <p>Cuando tu pareja seleccione una actividad, recibirás una notificación.</p>\n          \n          <ShareButton onClick={() => setShareUrl('')}>Crear Nuevo Poll</ShareButton>\n        </ShareSection>\n      )}\n    </CreatePollContainer>\n  );\n};\n\nexport default CreatePoll;\n","import { Activity } from '../types';\n\n// Genera un ID único para cada poll\nexport const generateUniqueId = (): string => {\n  return Math.random().toString(36).substring(2, 15) + \n         Math.random().toString(36).substring(2, 15);\n};\n\n// Codifica las actividades seleccionadas en un formato URL-friendly\nexport const encodeActivitiesForUrl = (activities: Activity[], creatorId: string): string => {\n  const data = {\n    activities: activities.map(a => a.id),\n    creatorId\n  };\n  \n  return encodeURIComponent(btoa(JSON.stringify(data)));\n};\n\n// Decodifica las actividades desde la URL\nexport const decodeActivitiesFromUrl = (encoded: string): { activityIds: number[], creatorId: string } => {\n  try {\n    const decoded = JSON.parse(atob(decodeURIComponent(encoded)));\n    return {\n      activityIds: decoded.activities || [],\n      creatorId: decoded.creatorId || ''\n    };\n  } catch (error) {\n    console.error('Error decoding URL data:', error);\n    return { activityIds: [], creatorId: '' };\n  }\n};\n\n// Genera la URL completa para compartir\nexport const generateShareableUrl = (baseUrl: string, encodedData: string): string => {\n  return `${baseUrl}/reveal/${encodedData}`;\n};\n"],"names":["CreatePollContainer","styled","div","_templateObject","_taggedTemplateLiteral","Title","h1","_templateObject2","ActivitySelector","_templateObject3","CategoryFilter","_templateObject4","CategoryButton","button","_templateObject5","props","isSelected","ActivityList","_templateObject6","ActivityCard","_templateObject7","ActivityName","h3","_templateObject8","ActivityDescription","p","_templateObject9","SelectedActivities","_templateObject0","SelectedTitle","h2","_templateObject1","SelectedList","_templateObject10","SelectedItem","_templateObject11","RemoveButton","_templateObject12","ShareSection","_templateObject13","ShareButton","_templateObject14","ShareUrl","_templateObject15","BackButton","_templateObject16","_ref","activities","navigate","useNavigate","selectedCategory","setSelectedCategory","useState","selectedActivities","setSelectedActivities","shareUrl","setShareUrl","categories","setCategories","creatorId","generateUniqueId","useEffect","uniqueCategories","Array","from","Set","map","a","category","filteredActivities","filter","_jsxs","children","_jsx","onClick","style","display","gap","copyToClipboard","navigator","clipboard","writeText","then","alert","catch","err","console","error","shareViaWhatsApp","whatsappUrl","concat","encodeURIComponent","window","open","_Fragment","activity","some","id","length","handleSelectActivity","name","description","handleRemoveActivity","activityId","disabled","handleSharePoll","encodedData","encodeActivitiesForUrl","baseUrl","location","origin","url","generateShareableUrl","Math","random","toString","substring","data","btoa","JSON","stringify","decodeActivitiesFromUrl","encoded","decoded","parse","atob","decodeURIComponent","activityIds"],"sourceRoot":""}